{"version":3,"sources":["ColorHEX.ts","ColorHSV.ts","strings.ts","assets/images/logo.svg","containers/Header.tsx","components/ComplementaryColorArea.tsx","components/HEXTextField.tsx","components/RGBTextField.tsx","reducks/colors/actionTypes.ts","reducks/colors/actions.ts","containers/Home.tsx","App.tsx","reportWebVitals.ts","reducks/colors/operations.ts","reducks/colors/reducers.ts","reducks/store/store.ts","index.tsx"],"names":["hexRegex","toRGB","hexRGB","result","exec","rgb","map","_","index","parseInt","toRGB2","hsv","h","s","v","hDegree","Math","floor","diff","v1","v2","v3","color","HEADER_TITLE","HOME_COMPLEMENTARY_COLOR_DESCRIPTION","Header","className","src","logo","alt","Strings","ComplementaryColorArea","props","hex","complementaryColor","styles","area","background","font","style","HEXTextField","isReadOnly","htmlFor","id","type","value","readOnly","RGBTextField","label","handleChange","onChange","ActionTypes","updateR","updateG","updateB","updateHSV","updateHex","updateComplementaryColor","r","payload","g","b","rgbRegex","Home","rootState","useSelector","state","colors","dispatch","useDispatch","handleChangeR","useCallback","event","inputtedStr","target","validateEmptyString","test","parsedInputtedStr","validateRange","handleChangeG","handleChangeB","length","useEffect","App","tmp","console","log","d","max","min","toHSV","e","f","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","toHex","componentToHex","decimalColor","hexColor","toString","toComplementary","sum","newRGB","initialState","approximateColors","colorsReducer","action","newHex","newComplementaryColor","rootReducer","combineReducers","store","createStore","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0fdf1dc7.chunk.js","sourcesContent":["const hexRegex: RegExp = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i;\n\nconst toRGB = (hexRGB: string) => {\n    const result = hexRegex.exec(hexRGB);\n    const rgb: Array<number> = [0, 0, 0];\n    if (result !== null) {\n        return rgb.map((_, index) => {\n            // exec()は要素1以降にマッチした結果を返すためindex + 1とする。\n            return parseInt(result[index + 1], 16);\n        });\n    }\n    return rgb;\n};\n\nexport const toHSV = (hexRGB: string) => {\n    const rgb: Array<number> = toRGB(hexRGB);\n    // rgb.forEach((colors) => {\n    //     if (colors < 0 && colors > 255) {\n    //         return [0, 0, 0];\n    //     }\n    // });\n\n    const r: number = rgb[0] / 255;\n    const g: number = rgb[1] / 255;\n    const b: number = rgb[2] / 255;\n\n    const max = Math.max(r, g, b);\n    const min = Math.min(r, g, b);\n    const diff = max - min;\n\n    // 色相\n    let h: number;\n    switch (min) {\n        case max:\n            h = 0;\n            break;\n        case b:\n            h = 60 * ((g - r) / diff) + 60;\n            break;\n        case r:\n            h = 60 * ((b - g) / diff) + 180;\n            break;\n        case g:\n            h = 60 * ((r - b) / diff) + 300;\n            break;\n        default:\n            h = 0;\n            console.log('unexpected error.');\n            break;\n    }\n\n    // 彩度\n    const s = ((max - min) / max) * 100;\n\n    // 明度\n    const v = max * 100;\n\n    return [h, s, v];\n};\n\nexport default toRGB;\n","const toRGB2 = (hsv: Array<number>) => {\n    let rgb;\n    const h = hsv[0] / 60;\n    const s = hsv[1];\n    const v = hsv[2];\n\n    if (s === 0) {\n        rgb = [v, v, v];\n    } else {\n        const hDegree = Math.floor(h);\n        const diff = h - hDegree;\n        const v1 = v * (1 - s);\n        const v2 = v * (1 - s * diff);\n        const v3 = v * (1 - s * (1 - diff));\n\n        switch (hDegree) {\n            case 0:\n            case 6:\n                rgb = [v, v3, v1];\n                break;\n            case 1:\n                rgb = [v2, v, v1];\n                break;\n\n            case 2:\n                rgb = [v1, v, v3];\n                break;\n\n            case 3:\n                rgb = [v1, v2, v];\n                break;\n\n            case 4:\n                rgb = [v3, v1, v];\n                break;\n\n            case 5:\n                rgb = [v, v1, v2];\n                break;\n            default:\n                rgb = [v, v, v];\n        }\n    }\n\n    return rgb.map((color) => {\n        return color * 255;\n    });\n};\n\nexport default toRGB2;\n","export const HEADER_TITLE = 'Web Design Palette';\nexport const HOME_DESCRIPTION_PURPOSE =\n    'RGBやHSVから『近似色』と『補色』を生成します。';\nexport const HOME_DESCRIPTION_HOW_TO_USE =\n    'カラーコードの入力 or スライダーによって生成できます。';\nexport const HOME_TO_HEX_LABEL = 'RGB(10進数)からHEX(16進数)への変換';\nexport const HOME_TO_HEX_INPUT_LABEL_RED = 'R';\nexport const HOME_TO_HEX_INPUT_LABEL_GREEN = 'G';\nexport const HOME_TO_HEX_INPUT_LABEL_BLUE = 'B';\nexport const HOME_HEX_LABEL = '#';\nexport const HOME_COMPLEMENTARY_COLOR_LABEL = '補色変換';\nexport const HOME_COMPLEMENTARY_COLOR_DESCRIPTION = '背景色が補色です！！！';\n","export default __webpack_public_path__ + \"static/media/logo.25a25603.svg\";","import React from 'react';\nimport '../assets/sass/header.scss';\nimport * as Strings from '../strings';\nimport logo from '../assets/images/logo.svg';\n\nconst Header: React.VFC = () => {\n    return (\n        <div className=\"header\">\n            <h1 className=\"header__logo\">\n                <img\n                    className=\"header__img\"\n                    src={logo}\n                    alt={Strings.HEADER_TITLE}\n                />\n            </h1>\n            <p className=\"header__title\">{Strings.HEADER_TITLE}</p>\n        </div>\n    );\n};\n\nexport default Header;\n","import React from 'react';\nimport '../assets/sass/complementaryColorArea.scss';\nimport * as Strings from '../strings';\n\ntype Props = {\n    hex: string;\n    complementaryColor: string;\n};\n\nconst ComplementaryColorArea: React.VFC<Props> = (props) => {\n    const { hex, complementaryColor } = props;\n\n    const styles: { [key: string]: React.CSSProperties } = {\n        area: {\n            background: `#${complementaryColor}`,\n        },\n        font: {\n            color: `#${hex}`,\n        },\n    };\n\n    return (\n        <div className=\"complementary-color-area\" style={styles.area}>\n            <p\n                className=\"complementary-color-area__description\"\n                style={styles.font}\n            >\n                {Strings.HOME_COMPLEMENTARY_COLOR_DESCRIPTION}\n            </p>\n            <p\n                className=\"complementary-color-area__description\"\n                style={styles.font}\n            >\n                {Strings.HOME_COMPLEMENTARY_COLOR_DESCRIPTION}\n            </p>\n            <p\n                className=\"complementary-color-area__description\"\n                style={styles.font}\n            >\n                {Strings.HOME_COMPLEMENTARY_COLOR_DESCRIPTION}\n            </p>\n        </div>\n    );\n};\n\nexport default ComplementaryColorArea;\n","import React from 'react';\nimport '../assets/sass/hexTextField.scss';\nimport * as Strings from '../strings';\n\ntype Props = {\n    hex: string;\n    isReadOnly: boolean;\n};\n\nconst HEXTextField: React.VFC<Props> = (props) => {\n    const { hex, isReadOnly } = props;\n\n    return (\n        <div className=\"hex-text-field\">\n            <label className=\"hex-text-field__label\" htmlFor=\"hex\">\n                {Strings.HOME_HEX_LABEL}\n            </label>\n            <input\n                className=\"hex-text-field__input\"\n                id=\"hex\"\n                type=\"text\"\n                value={hex}\n                readOnly={isReadOnly}\n            />\n        </div>\n    );\n};\n\nexport default HEXTextField;\n","import React from 'react';\nimport '../assets/sass/rgbTextField.scss';\n\ntype Props = {\n    id: string;\n    label: string;\n    color: number;\n    handleChange: (event: React.ChangeEvent<HTMLInputElement>) => void;\n};\n\nconst RGBTextField: React.VFC<Props> = (props) => {\n    const { id, label, color, handleChange } = props;\n    return (\n        <div className=\"rgb-text-field\">\n            <label\n                className=\"rgb-text-field__label\"\n                htmlFor={id}\n            >{`${label} : `}</label>\n            <input\n                className={`rgb-text-field__input--${id}`}\n                id={id}\n                type=\"text\"\n                value={color}\n                onChange={handleChange}\n            />\n        </div>\n    );\n};\n\nexport default RGBTextField;\n","const ActionTypes = {\n    updateR: 'UPDATE_R',\n    updateG: 'UPDATE_G',\n    updateB: 'UPDATE_B',\n    updateHSV: 'UPDATE_HSV',\n    updateHex: 'UPDATE_HEX',\n    updateComplementaryColor: 'UPDATE_COMPLEMENTARY_COLOR',\n} as const;\n\nexport default ActionTypes;\n","import ActionTypes from './actionTypes';\nimport { UpdateColorActionTypes } from './types';\n\nexport const updateR = (r: number): UpdateColorActionTypes => {\n    return {\n        type: ActionTypes.updateR,\n        payload: r,\n    };\n};\n\nexport const updateG = (g: number): UpdateColorActionTypes => {\n    return {\n        type: ActionTypes.updateG,\n        payload: g,\n    };\n};\n\nexport const updateB = (b: number): UpdateColorActionTypes => {\n    return {\n        type: ActionTypes.updateB,\n        payload: b,\n    };\n};\n\nexport const updateHSV = (): UpdateColorActionTypes => {\n    return {\n        type: ActionTypes.updateHSV,\n    };\n};\n\nexport const updateHex = (): UpdateColorActionTypes => {\n    return {\n        type: ActionTypes.updateHex,\n    };\n};\n\nexport const updateComplementaryColor = (): UpdateColorActionTypes => {\n    return {\n        type: ActionTypes.updateComplementaryColor,\n    };\n};\n","import React, { useCallback, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport * as Strings from '../strings';\nimport '../assets/sass/home.scss';\nimport { RGBTextField } from '../components';\nimport HEXTextField from '../components/HEXTextField';\nimport ComplementaryColorArea from '../components/ComplementaryColorArea';\nimport { RootState } from '../reducks/store/store';\nimport {\n    updateB,\n    updateComplementaryColor,\n    updateG,\n    updateHex,\n    updateR,\n} from '../reducks/colors/actions';\n\nconst rgbRegex = /^[0-9]*/;\n\nconst Home: React.VFC = () => {\n    const rootState = useSelector((state: RootState) => state.colors);\n    const dispatch = useDispatch();\n\n    const handleChangeR = useCallback(\n        (event: React.ChangeEvent<HTMLInputElement>) => {\n            const inputtedStr = event.target.value;\n            const validateEmptyStringResult = validateEmptyString(inputtedStr);\n            if (validateEmptyStringResult) {\n                dispatch(updateR(0));\n            } else if (rgbRegex.test(inputtedStr)) {\n                const parsedInputtedStr = parseInt(inputtedStr, 10);\n                const validateRangeResult = validateRange(parsedInputtedStr);\n                if (validateRangeResult) {\n                    dispatch(updateR(parsedInputtedStr));\n                }\n            }\n        },\n        [rootState.rgb.r]\n    );\n\n    const handleChangeG = useCallback(\n        (event: React.ChangeEvent<HTMLInputElement>) => {\n            const inputtedStr = event.target.value;\n            const validateEmptyStringResult = validateEmptyString(inputtedStr);\n            if (validateEmptyStringResult) {\n                dispatch(updateG(0));\n            } else if (rgbRegex.test(inputtedStr)) {\n                const parsedInputtedStr = parseInt(inputtedStr, 10);\n                const validateRangeResult = validateRange(parsedInputtedStr);\n                if (validateRangeResult) {\n                    dispatch(updateG(parsedInputtedStr));\n                }\n            }\n        },\n        [rootState.rgb.g]\n    );\n\n    const handleChangeB = useCallback(\n        (event: React.ChangeEvent<HTMLInputElement>) => {\n            const inputtedStr = event.target.value;\n            const validateEmptyStringResult = validateEmptyString(inputtedStr);\n            if (validateEmptyStringResult) {\n                dispatch(updateB(0));\n            } else if (rgbRegex.test(inputtedStr)) {\n                const parsedInputtedStr = parseInt(inputtedStr, 10);\n                const validateRangeResult = validateRange(parsedInputtedStr);\n                if (validateRangeResult) {\n                    dispatch(updateB(parsedInputtedStr));\n                }\n            }\n        },\n        [rootState.rgb.b]\n    );\n\n    const validateEmptyString = (inputtedStr: string) => {\n        return inputtedStr.length === 0;\n    };\n\n    const validateRange = (parsedInputtedStr: number) => {\n        return parsedInputtedStr >= 0 && parsedInputtedStr <= 255;\n    };\n\n    useEffect(() => {\n        dispatch(updateHex());\n    }, [rootState.rgb.r, rootState.rgb.g, rootState.rgb.b]);\n\n    useEffect(() => {\n        dispatch(updateComplementaryColor());\n    }, [rootState.hex]);\n\n    return (\n        <div className=\"home\">\n            <p className=\"home__description\">\n                {Strings.HOME_DESCRIPTION_PURPOSE}\n            </p>\n            <p className=\"home__description\">\n                {Strings.HOME_DESCRIPTION_HOW_TO_USE}\n            </p>\n            <p className=\"home__description\">{Strings.HOME_TO_HEX_LABEL}</p>\n            <div className=\"home__to-hex\">\n                <RGBTextField\n                    id=\"red\"\n                    label={Strings.HOME_TO_HEX_INPUT_LABEL_RED}\n                    color={rootState.rgb.r}\n                    handleChange={handleChangeR}\n                />\n                <RGBTextField\n                    id=\"green\"\n                    label={Strings.HOME_TO_HEX_INPUT_LABEL_GREEN}\n                    color={rootState.rgb.g}\n                    handleChange={handleChangeG}\n                />\n                <RGBTextField\n                    id=\"blue\"\n                    label={Strings.HOME_TO_HEX_INPUT_LABEL_BLUE}\n                    color={rootState.rgb.b}\n                    handleChange={handleChangeB}\n                />\n                <p className=\"home__arrow\"> → </p>\n                <HEXTextField hex={rootState.hex} isReadOnly />\n            </div>\n            <p className=\"home__complementary_color-label\">\n                {Strings.HOME_COMPLEMENTARY_COLOR_LABEL}\n            </p>\n            <HEXTextField\n                hex={rootState.complementaryColor}\n                isReadOnly={false}\n            />\n            <ComplementaryColorArea\n                hex={rootState.hex}\n                complementaryColor={rootState.complementaryColor}\n            />\n        </div>\n    );\n};\n\nexport default Home;\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport './App.scss';\nimport toRGB, { toHSV } from './ColorHEX';\nimport toRGB2 from './ColorHSV';\nimport { RootState } from './reducks/store/store';\nimport { Header, Home } from './containers/index';\n\nfunction App() {\n    const tmp = useSelector((state: RootState) => state.colors);\n\n    const b = toRGB('d33b69');\n    console.log(b);\n\n    const d = toHSV('d33b69');\n    console.log(d);\n\n    const e = toRGB2([20.104, 0.749, 1]);\n    console.log(e);\n\n    const f = tmp.rgb;\n    const g = tmp.hsv;\n    const h = tmp.complementaryColor;\n    console.log(f);\n    console.log(g);\n    console.log(h);\n\n    return (\n        <div className=\"App\">\n            <Header />\n            <main className=\"main\">\n                <Home />\n            </main>\n        </div>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import('web-vitals').then(\n            ({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n                getCLS(onPerfEntry);\n                getFID(onPerfEntry);\n                getFCP(onPerfEntry);\n                getLCP(onPerfEntry);\n                getTTFB(onPerfEntry);\n            }\n        );\n    }\n};\n\nexport default reportWebVitals;\n","import toRGB from '../../ColorHEX';\n\n// rgbからhexに変換する。\nexport const toHex = (r: number, g: number, b: number) => {\n    return componentToHex(r) + componentToHex(g) + componentToHex(b);\n};\n\nconst componentToHex = (decimalColor: number) => {\n    const hexColor = decimalColor.toString(16);\n    return hexColor.length === 1 ? `0${hexColor}` : hexColor.toString();\n};\n\n// hexから補色に変換する。\nexport const toComplementary = (hexRGB: string) => {\n    const rgb: Array<number> = toRGB(hexRGB);\n    const r: number = rgb[0];\n    const g: number = rgb[1];\n    const b: number = rgb[2];\n    if (r >= 0 && r <= 255 && g >= 0 && g <= 255 && b >= 0 && b <= 255) {\n        const max = Math.max(r, g, b);\n        const min = Math.min(r, g, b);\n        const sum = max + min;\n\n        const newRGB = rgb.map((color) => {\n            return sum - color;\n        });\n        return toHex(newRGB[0], newRGB[1], newRGB[2]);\n    }\n    return toHex(rgb[0], rgb[1], rgb[2]);\n};\n","import { Colors, UpdateColorActionTypes } from './types';\nimport ActionTypes from './actionTypes';\nimport { toHex, toComplementary } from './operations';\n\nconst initialState: Colors = {\n    rgb: { r: 0, g: 0, b: 0 },\n    hsv: { h: 0, s: 0, v: 0 },\n    hex: '000000',\n    complementaryColor: '000000',\n    approximateColors: [],\n};\n\nconst colorsReducer = (\n    state = initialState,\n    action: UpdateColorActionTypes\n): Colors => {\n    switch (action.type) {\n        case ActionTypes.updateR:\n            return {\n                ...state,\n                rgb: { r: action.payload, g: state.rgb.g, b: state.rgb.b },\n            };\n        case ActionTypes.updateG:\n            return {\n                ...state,\n                rgb: { r: state.rgb.r, g: action.payload, b: state.rgb.b },\n            };\n        case ActionTypes.updateB:\n            return {\n                ...state,\n                rgb: { r: state.rgb.r, g: state.rgb.g, b: action.payload },\n            };\n        case ActionTypes.updateHSV:\n            return { ...state };\n        case ActionTypes.updateHex: {\n            const newHex = toHex(state.rgb.r, state.rgb.g, state.rgb.b);\n            return { ...state, hex: newHex };\n        }\n        case ActionTypes.updateComplementaryColor: {\n            const newComplementaryColor = toComplementary(state.hex);\n            return { ...state, complementaryColor: newComplementaryColor };\n        }\n        default:\n            return state;\n    }\n};\n\nexport default colorsReducer;\n","import { combineReducers, createStore } from 'redux';\nimport colorsReducer from '../colors/reducers';\n\nconst rootReducer = combineReducers({\n    colors: colorsReducer,\n});\n\nexport type RootState = ReturnType<typeof rootReducer>;\nconst store = createStore(rootReducer);\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport { Provider } from 'react-redux';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport store from './reducks/store/store';\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App />\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}