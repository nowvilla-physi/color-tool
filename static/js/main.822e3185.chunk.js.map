{"version":3,"sources":["strings.ts","assets/images/logo.svg","containers/Header.tsx","components/ApproximateColorItem.tsx","components/BaseColor.tsx","components/ComplementaryColorArea.tsx","components/HEXTextField.tsx","components/PaletteLabel.tsx","components/RGBTextField.tsx","components/ColorSlider.tsx","reducks/colors/actionTypes.ts","reducks/colors/actions.ts","reducks/colors/operations.ts","containers/Home.tsx","App.tsx","reportWebVitals.ts","reducks/colors/reducers.ts","reducks/store/store.ts","index.tsx"],"names":["HEADER_TITLE","HOME_COMPLEMENTARY_COLOR_DESCRIPTION","Header","className","src","logo","alt","Strings","ApproximateColorItem","props","color","count","styles","backgroundColor","style","BaseColor","rgb","height","r","g","b","ComplementaryColorArea","complementaryColor","area","background","font","HEXTextField","hex","isReadOnly","handleChange","htmlFor","id","type","value","readOnly","onChange","e","console","log","PaletteLabel","label","RGBTextField","ColorSlider","max","min","ActionTypes","updateR","updateG","updateB","updateH","updateS","updateV","updateHex","updateHexForHsv","updateApproximateColor","updateComplementaryColor","payload","h","s","v","updateHexForHSV","hexRegex","toHEXFromRGB","componentToHex","decimalColor","hexColor","toString","length","toRGBFromHEX","result","exec","i","parseInt","toComplementaryColorFromHEX","hexRGB","sum","Math","newRGB","map","toRGBFromHSV","hsv","hDegree","floor","diff","v1","v2","v3","createApproximateColorH","baseColorsH","approximateMinusColorsH","approximatePlusColorsH","newH","newCount","hexFromRGB","push","reverse","createApproximateColorS","baseColorsS","approximateMinusColorsS","approximatePlusColorsS","newS","createApproximateColorV","baseColorsV","approximateMinusColorsV","approximatePlusColorsV","newV","Home","rootState","useSelector","state","colors","dispatch","useDispatch","useEffect","toHSVFromRGB","event","inputtedHEX","target","approximateHColors","index","approximateSColors","approximateVColors","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","initialState","colorsReducer","action","newHEX","undefined","newComplementaryColor","rootReducer","combineReducers","store","createStore","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.822e3185.chunk.js","sourcesContent":["export const HEADER_TITLE = 'Web Design Palette';\nexport const HOME_DESCRIPTION_PURPOSE =\n    'RGBやHSVから『近似色』と『補色』を生成します。';\nexport const HOME_DESCRIPTION_HOW_TO_USE =\n    'カラーコードの入力 or スライダーによって生成できます。';\nexport const HOME_TO_HEX_LABEL =\n    'RGB(10進数)、もしくはHEX(16進数)を入力して下さい。';\nexport const HOME_TO_HEX_INPUT_LABEL_RED = 'R';\nexport const HOME_TO_HEX_INPUT_LABEL_GREEN = 'G';\nexport const HOME_TO_HEX_INPUT_LABEL_BLUE = 'B';\nexport const HOME_HEX_LABEL = '#';\nexport const HOME_APPROXIMATE_COLOR_LABEL = '近似色変換';\nexport const HOME_COMPLEMENTARY_COLOR_LABEL = '補色変換';\nexport const HOME_COMPLEMENTARY_COLOR_DESCRIPTION = '背景色が補色です！！！';\n","export default __webpack_public_path__ + \"static/media/logo.25a25603.svg\";","import React from 'react';\nimport '../assets/sass/header.scss';\nimport * as Strings from '../strings';\nimport logo from '../assets/images/logo.svg';\n\nconst Header: React.VFC = () => {\n    return (\n        <div className=\"header\">\n            <h1 className=\"header__logo\">\n                <img\n                    className=\"header__img\"\n                    src={logo}\n                    alt={Strings.HEADER_TITLE}\n                />\n            </h1>\n            <p className=\"header__title\">{Strings.HEADER_TITLE}</p>\n        </div>\n    );\n};\n\nexport default Header;\n","import React from 'react';\nimport '../assets/sass/approximateColorItem.scss';\n\ntype Props = {\n    color: string;\n    count: number;\n};\n\nconst ApproximateColorItem: React.VFC<Props> = (props) => {\n    const { color, count } = props;\n    const styles: { [key: string]: React.CSSProperties } = {\n        color: {\n            backgroundColor: `#${color}`,\n        },\n    };\n    return (\n        <div className=\"approximate-color-item\" style={styles.color}>\n            <p className=\"approximate-color-item--white\">\n                {count > 0 ? `+${count}` : `${count}`}\n            </p>\n            <p className=\"approximate-color-item--black\">\n                {count > 0 ? `+${count}` : `${count}`}\n            </p>\n        </div>\n    );\n};\n\nexport default ApproximateColorItem;\n","import React from 'react';\nimport '../assets/sass/BaseColor.scss';\nimport { RGB } from '../reducks/colors/types';\n\ntype Props = {\n    rgb: RGB;\n    height: number;\n};\n\nconst BaseColor: React.VFC<Props> = (props) => {\n    const { rgb, height } = props;\n    const style = {\n        height: `${height}px`,\n        backgroundColor: `rgb(${rgb.r}, ${rgb.g}, ${rgb.b}, 1)`,\n    };\n    return <div className=\"base-color\" style={style} />;\n};\n\nexport default BaseColor;\n","import React from 'react';\nimport '../assets/sass/complementaryColorArea.scss';\nimport * as Strings from '../strings';\nimport { RGB } from '../reducks/colors/types';\n\ntype Props = {\n    rgb: RGB;\n    complementaryColor: string;\n};\n\nconst ComplementaryColorArea: React.VFC<Props> = (props) => {\n    const { rgb, complementaryColor } = props;\n\n    const styles: { [key: string]: React.CSSProperties } = {\n        area: {\n            background: `#${complementaryColor}`,\n        },\n        font: {\n            color: `rgb(${rgb.r}, ${rgb.g}, ${rgb.b}, 1)`,\n        },\n    };\n\n    return (\n        <div className=\"complementary-color-area\" style={styles.area}>\n            <p\n                className=\"complementary-color-area__description\"\n                style={styles.font}\n            >\n                {Strings.HOME_COMPLEMENTARY_COLOR_DESCRIPTION}\n            </p>\n            <p\n                className=\"complementary-color-area__description\"\n                style={styles.font}\n            >\n                {Strings.HOME_COMPLEMENTARY_COLOR_DESCRIPTION}\n            </p>\n            <p\n                className=\"complementary-color-area__description\"\n                style={styles.font}\n            >\n                {Strings.HOME_COMPLEMENTARY_COLOR_DESCRIPTION}\n            </p>\n        </div>\n    );\n};\n\nexport default ComplementaryColorArea;\n","import React from 'react';\nimport '../assets/sass/hexTextField.scss';\nimport * as Strings from '../strings';\n\ntype Props = {\n    hex: string;\n    isReadOnly: boolean;\n    handleChange?: (value: React.ChangeEvent<HTMLInputElement>) => void;\n};\n\nconst HEXTextField: React.VFC<Props> = (props) => {\n    const { hex, isReadOnly, handleChange } = props;\n\n    return (\n        <div className=\"hex-text-field\">\n            <label className=\"hex-text-field__label\" htmlFor=\"hex\">\n                {Strings.HOME_HEX_LABEL}\n            </label>\n            <input\n                className=\"hex-text-field__input\"\n                id=\"hex\"\n                type=\"text\"\n                value={hex}\n                readOnly={isReadOnly}\n                onChange={(e) =>\n                    handleChange ? handleChange(e) : console.log(e)\n                }\n            />\n        </div>\n    );\n};\n\nexport default HEXTextField;\n","import React from 'react';\nimport '../assets/sass/paletteLabel.scss';\n\ntype Props = {\n    label: string;\n    height: number;\n};\n\nconst PaletteLabel: React.VFC<Props> = (props) => {\n    const { label, height } = props;\n    const styles: { [key: string]: React.CSSProperties } = {\n        height: {\n            height: `${height}px`,\n        },\n    };\n\n    return (\n        <div className=\"palette-label\" style={styles.height}>\n            <p>{label}</p>\n        </div>\n    );\n};\n\nexport default PaletteLabel;\n","import React from 'react';\nimport '../assets/sass/rgbTextField.scss';\n\ntype Props = {\n    id: string;\n    label: string;\n    color: number;\n};\n\nconst RGBTextField: React.VFC<Props> = (props) => {\n    const { id, label, color } = props;\n    const isReadOnly = true;\n    return (\n        <div className=\"rgb-text-field\">\n            <label\n                className=\"rgb-text-field__label\"\n                htmlFor={id}\n            >{`${label} : `}</label>\n            <input\n                className={`rgb-text-field__input--${id}`}\n                id={id}\n                type=\"text\"\n                value={color}\n                readOnly={isReadOnly}\n            />\n        </div>\n    );\n};\n\nexport default RGBTextField;\n","import React from 'react';\nimport Slider from 'rc-slider';\nimport 'rc-slider/assets/index.css';\nimport '../assets/sass/colorSlider.scss';\n\ntype Props = {\n    id: string;\n    label: string;\n    max: number;\n    color: number;\n    handleChange: (value: number) => void;\n};\n\nconst ColorSlider: React.VFC<Props> = (props) => {\n    const { id, label, max, color, handleChange } = props;\n    return (\n        <div className={`slider--${id}`}>\n            <span>{label}</span>\n            <Slider\n                min={0}\n                max={max}\n                value={color}\n                onChange={(value) => handleChange(value)}\n            />\n        </div>\n    );\n};\n\nexport default ColorSlider;\n","const ActionTypes = {\n    updateR: 'UPDATE_R',\n    updateG: 'UPDATE_G',\n    updateB: 'UPDATE_B',\n    updateH: 'UPDATE_H',\n    updateS: 'UPDATE_S',\n    updateV: 'UPDATE_V',\n    updateHex: 'UPDATE_HEX',\n    updateHexForHsv: 'UPDATE_HEX_FOR_HSV',\n    updateApproximateColor: 'UPDATE_APPROXIMATE_COLOR',\n    updateComplementaryColor: 'UPDATE_COMPLEMENTARY_COLOR',\n} as const;\n\nexport default ActionTypes;\n","import ActionTypes from './actionTypes';\nimport { UpdateColorActionTypes } from './types';\n\nexport const updateR = (r: number): UpdateColorActionTypes => {\n    return {\n        type: ActionTypes.updateR,\n        payload: r,\n    };\n};\n\nexport const updateG = (g: number): UpdateColorActionTypes => {\n    return {\n        type: ActionTypes.updateG,\n        payload: g,\n    };\n};\n\nexport const updateB = (b: number): UpdateColorActionTypes => {\n    return {\n        type: ActionTypes.updateB,\n        payload: b,\n    };\n};\n\nexport const updateH = (h: number): UpdateColorActionTypes => {\n    return {\n        type: ActionTypes.updateH,\n        payload: h,\n    };\n};\n\nexport const updateS = (s: number): UpdateColorActionTypes => {\n    return {\n        type: ActionTypes.updateS,\n        payload: s,\n    };\n};\n\nexport const updateV = (v: number): UpdateColorActionTypes => {\n    return {\n        type: ActionTypes.updateV,\n        payload: v,\n    };\n};\n\nexport const updateHex = (hex?: string): UpdateColorActionTypes => {\n    return {\n        type: ActionTypes.updateHex,\n        payload: hex,\n    };\n};\n\nexport const updateHexForHSV = (): UpdateColorActionTypes => {\n    return {\n        type: ActionTypes.updateHexForHsv,\n    };\n};\n\nexport const updateApproximateColor = (hex: string): UpdateColorActionTypes => {\n    return {\n        type: ActionTypes.updateApproximateColor,\n        payload: hex,\n    };\n};\n\nexport const updateComplementaryColor = (): UpdateColorActionTypes => {\n    return {\n        type: ActionTypes.updateComplementaryColor,\n    };\n};\n","const hexRegex: RegExp = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i;\n\n// rgbからhexに変換する。\nexport const toHEXFromRGB = (r: number, g: number, b: number) => {\n    return componentToHex(r) + componentToHex(g) + componentToHex(b);\n};\n\nconst componentToHex = (decimalColor: number) => {\n    const hexColor = decimalColor.toString(16);\n    return hexColor.length === 1 ? `0${hexColor}` : hexColor.toString();\n};\n\n// hexからrgbに変換する。\nexport const toRGBFromHEX = (hex: string) => {\n    const result = hexRegex.exec(`#${hex}`);\n    const rgb: Array<number> = [];\n    if (result !== null) {\n        for (let i = 0; i < 3; i += 1) {\n            // exec()は要素1以降にマッチした結果を返すためindex + 1とする。\n            rgb[i] = parseInt(result[i + 1], 16);\n        }\n    }\n    return rgb;\n};\n\n// hexから補色に変換する。\nexport const toComplementaryColorFromHEX = (hexRGB: string) => {\n    const rgb: Array<number> = toRGBFromHEX(hexRGB);\n    const r: number = rgb[0];\n    const g: number = rgb[1];\n    const b: number = rgb[2];\n    if (r >= 0 && r <= 255 && g >= 0 && g <= 255 && b >= 0 && b <= 255) {\n        const max = Math.max(r, g, b);\n        const min = Math.min(r, g, b);\n        const sum = max + min;\n\n        const newRGB = rgb.map((color) => {\n            return sum - color;\n        });\n        return toHEXFromRGB(newRGB[0], newRGB[1], newRGB[2]);\n    }\n    return toHEXFromRGB(rgb[0], rgb[1], rgb[2]);\n};\n\n// hexからhsvに変換する。\nexport const toHSVFromRGB = (rgb: Array<number>) => {\n    const r: number = rgb[0] / 255;\n    const g: number = rgb[1] / 255;\n    const b: number = rgb[2] / 255;\n\n    const max = Math.max(r, g, b);\n    const min = Math.min(r, g, b);\n    const diff = max - min;\n\n    // 色相\n    let h: number;\n    switch (min) {\n        case max:\n            h = 0;\n            break;\n        case b:\n            h = 60 * ((g - r) / diff) + 60;\n            break;\n        case r:\n            h = 60 * ((b - g) / diff) + 180;\n            break;\n        case g:\n            h = 60 * ((r - b) / diff) + 300;\n            break;\n        default:\n            h = 0;\n            console.log('unexpected error.');\n            break;\n    }\n\n    // 彩度\n    const s = max !== 0 ? ((max - min) / max) * 100 : 0;\n\n    // 明度\n    const v = max * 100;\n\n    return [Math.floor(h), Math.floor(s), Math.floor(v)];\n};\n\n// hsvからrgbに変換する。\nexport const toRGBFromHSV = (hsv: Array<number>) => {\n    let rgb;\n    const h = hsv[0] / 60;\n    const s = hsv[1] / 100;\n    const v = hsv[2] / 100;\n\n    if (s === 0) {\n        rgb = [v, v, v];\n    } else {\n        const hDegree = Math.floor(h);\n        const diff = h - hDegree;\n        const v1 = v * (1 - s);\n        const v2 = v * (1 - s * diff);\n        const v3 = v * (1 - s * (1 - diff));\n\n        switch (hDegree) {\n            case 0:\n            case 6:\n                rgb = [v, v3, v1];\n                break;\n            case 1:\n                rgb = [v2, v, v1];\n                break;\n            case 2:\n                rgb = [v1, v, v3];\n                break;\n            case 3:\n                rgb = [v1, v2, v];\n                break;\n            case 4:\n                rgb = [v3, v1, v];\n                break;\n            case 5:\n                rgb = [v, v1, v2];\n                break;\n            default:\n                rgb = [v, v, v];\n        }\n    }\n\n    return rgb.map((color) => {\n        return Math.floor(color * 255);\n    });\n};\n\n// 初期の近似色を作成する。\nexport const createApproximateColorH = (\n    hex: string,\n    h: number,\n    s: number,\n    v: number,\n    count: number = 0\n) => {\n    const baseColorsH = [\n        {\n            hsv: { h, s, v },\n            hex,\n            count,\n        },\n    ];\n    const approximateMinusColorsH = [];\n    const approximatePlusColorsH = [];\n    for (let i = 2; i <= 40; i += 2) {\n        let newH = h + i;\n        const newCount = count + i;\n        if (newH > 359) {\n            newH -= 360;\n        }\n\n        const rgb = toRGBFromHSV([newH, s, v]);\n        const hexFromRGB = toHEXFromRGB(rgb[0], rgb[1], rgb[2]);\n\n        approximatePlusColorsH.push({\n            hsv: { h: newH, s, v },\n            hex: hexFromRGB,\n            count: newCount,\n        });\n    }\n\n    for (let i = -2; i >= -40; i -= 2) {\n        let newH = h + i;\n        const newCount = count + i;\n        if (newH < 0) {\n            newH += 360;\n        }\n\n        const rgb = toRGBFromHSV([newH, s, v]);\n        const hexFromRGB = toHEXFromRGB(rgb[0], rgb[1], rgb[2]);\n\n        approximateMinusColorsH.push({\n            hsv: { h: newH, s, v },\n            hex: hexFromRGB,\n            count: newCount,\n        });\n    }\n\n    return [\n        ...approximateMinusColorsH.reverse(),\n        ...baseColorsH,\n        ...approximatePlusColorsH,\n    ];\n};\n\nexport const createApproximateColorS = (\n    hex: string,\n    h: number,\n    s: number,\n    v: number,\n    count: number = 0\n) => {\n    const baseColorsS = [\n        {\n            hsv: { h, s, v },\n            hex,\n            count,\n        },\n    ];\n    const approximateMinusColorsS = [];\n    const approximatePlusColorsS = [];\n    let newCount = count;\n    for (let i = 2; i <= 40; i += 2) {\n        let newS = s + i;\n        if (newS > 100) {\n            newS = 100;\n        } else {\n            newCount = count + i;\n        }\n\n        const rgb = toRGBFromHSV([h, newS, v]);\n        const hexFromRGB = toHEXFromRGB(rgb[0], rgb[1], rgb[2]);\n\n        approximatePlusColorsS.push({\n            hsv: { h, s: newS, v },\n            hex: hexFromRGB,\n            count: newCount,\n        });\n    }\n\n    newCount = count;\n    for (let i = -2; i >= -40; i -= 2) {\n        let newS = s + i;\n        if (newS < 0) {\n            newS = 0;\n        } else {\n            newCount = count + i;\n        }\n\n        const rgb = toRGBFromHSV([h, newS, v]);\n        const hexFromRGB = toHEXFromRGB(rgb[0], rgb[1], rgb[2]);\n\n        approximateMinusColorsS.push({\n            hsv: { h, s: newS, v },\n            hex: hexFromRGB,\n            count: newCount,\n        });\n    }\n\n    return [\n        ...approximateMinusColorsS.reverse(),\n        ...baseColorsS,\n        ...approximatePlusColorsS,\n    ];\n};\n\nexport const createApproximateColorV = (\n    hex: string,\n    h: number,\n    s: number,\n    v: number,\n    count: number = 0\n) => {\n    const baseColorsV = [\n        {\n            hsv: { h, s, v },\n            hex,\n            count,\n        },\n    ];\n    const approximateMinusColorsV = [];\n    const approximatePlusColorsV = [];\n    let newCount = count;\n    for (let i = 2; i <= 40; i += 2) {\n        let newV = v + i;\n        if (newV > 100) {\n            newV = 100;\n        } else {\n            newCount = count + i;\n        }\n\n        const rgb = toRGBFromHSV([h, s, newV]);\n        const hexFromRGB = toHEXFromRGB(rgb[0], rgb[1], rgb[2]);\n\n        approximatePlusColorsV.push({\n            hsv: { h, s, v: newV },\n            hex: hexFromRGB,\n            count: newCount,\n        });\n    }\n\n    newCount = count;\n    for (let i = -2; i >= -40; i -= 2) {\n        let newV = v + i;\n        if (newV < 0) {\n            newV = 0;\n        } else {\n            newCount = count + i;\n        }\n\n        const rgb = toRGBFromHSV([h, s, newV]);\n        const hexFromRGB = toHEXFromRGB(rgb[0], rgb[1], rgb[2]);\n\n        approximateMinusColorsV.push({\n            hsv: { h, s, v: newV },\n            hex: hexFromRGB,\n            count: newCount,\n        });\n    }\n\n    return [\n        ...approximateMinusColorsV.reverse(),\n        ...baseColorsV,\n        ...approximatePlusColorsV,\n    ];\n};\n","import React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport * as Strings from '../strings';\nimport '../assets/sass/home.scss';\nimport {\n    BaseColor,\n    ColorSlider,\n    PaletteLabel,\n    RGBTextField,\n} from '../components';\nimport HEXTextField from '../components/HEXTextField';\nimport ComplementaryColorArea from '../components/ComplementaryColorArea';\nimport { RootState } from '../reducks/store/store';\nimport {\n    updateApproximateColor,\n    updateB,\n    updateComplementaryColor,\n    updateG,\n    updateH,\n    updateHex,\n    updateHexForHSV,\n    updateR,\n    updateS,\n    updateV,\n} from '../reducks/colors/actions';\nimport { toHSVFromRGB, toRGBFromHEX } from '../reducks/colors/operations';\nimport ApproximateColorItem from '../components/ApproximateColorItem';\n\nconst Home: React.VFC = () => {\n    const rootState = useSelector((state: RootState) => state.colors);\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n        const rgb = toRGBFromHEX(rootState.hex);\n        if (rgb.length === 3) {\n            dispatch(updateR(rgb[0]));\n            dispatch(updateG(rgb[1]));\n            dispatch(updateB(rgb[2]));\n            dispatch(updateComplementaryColor());\n\n            const hsv = toHSVFromRGB(rgb);\n            dispatch(updateH(hsv[0]));\n            dispatch(updateS(hsv[1]));\n            dispatch(updateV(hsv[2]));\n\n            dispatch(updateApproximateColor(rootState.hex));\n        }\n    }, [rootState.hex]);\n\n    const handleChangeForHEX = (event: React.ChangeEvent<HTMLInputElement>) => {\n        const inputtedHEX = event.target.value;\n        if (inputtedHEX.length <= 6) {\n            dispatch(updateHex(inputtedHEX));\n        }\n    };\n\n    const handleChangeForSliderR = (value: number) => {\n        dispatch(updateR(value));\n        dispatch(updateHex());\n    };\n\n    const handleChangeForSliderG = (value: number) => {\n        dispatch(updateG(value));\n        dispatch(updateHex());\n    };\n\n    const handleChangeForSliderB = (value: number) => {\n        dispatch(updateB(value));\n        dispatch(updateHex());\n    };\n\n    const handleChangeForSliderH = (value: number) => {\n        dispatch(updateH(value));\n        dispatch(updateHexForHSV());\n    };\n\n    const handleChangeForSliderS = (value: number) => {\n        dispatch(updateS(value));\n        dispatch(updateHexForHSV());\n    };\n\n    const handleChangeForSliderV = (value: number) => {\n        dispatch(updateV(value));\n        dispatch(updateHexForHSV());\n    };\n\n    return (\n        <div className=\"home\">\n            <p className=\"home__description\">\n                {Strings.HOME_DESCRIPTION_PURPOSE}\n            </p>\n            <p className=\"home__description\">\n                {Strings.HOME_DESCRIPTION_HOW_TO_USE}\n            </p>\n            <p className=\"home__description\">{Strings.HOME_TO_HEX_LABEL}</p>\n            <div className=\"home__to-hex\">\n                <HEXTextField\n                    hex={rootState.hex}\n                    isReadOnly={false}\n                    handleChange={handleChangeForHEX}\n                />\n                <p className=\"home__arrow\"> → </p>\n                <RGBTextField\n                    id=\"red\"\n                    label={Strings.HOME_TO_HEX_INPUT_LABEL_RED}\n                    color={rootState.rgb.r}\n                />\n                <RGBTextField\n                    id=\"green\"\n                    label={Strings.HOME_TO_HEX_INPUT_LABEL_GREEN}\n                    color={rootState.rgb.g}\n                />\n                <RGBTextField\n                    id=\"blue\"\n                    label={Strings.HOME_TO_HEX_INPUT_LABEL_BLUE}\n                    color={rootState.rgb.b}\n                />\n            </div>\n            <p className=\"home__approximate_color-label\">\n                {Strings.HOME_APPROXIMATE_COLOR_LABEL}\n            </p>\n            <div className=\"home__slider\">\n                <ColorSlider\n                    id=\"r\"\n                    label=\"R:\"\n                    max={255}\n                    color={rootState.rgb.r}\n                    handleChange={handleChangeForSliderR}\n                />\n                <ColorSlider\n                    id=\"g\"\n                    label=\"G:\"\n                    max={255}\n                    color={rootState.rgb.g}\n                    handleChange={handleChangeForSliderG}\n                />\n                <ColorSlider\n                    id=\"b\"\n                    label=\"B:\"\n                    max={255}\n                    color={rootState.rgb.b}\n                    handleChange={handleChangeForSliderB}\n                />\n                <ColorSlider\n                    id=\"h\"\n                    label=\"H:\"\n                    max={359}\n                    color={rootState.hsv.h}\n                    handleChange={handleChangeForSliderH}\n                />\n                <ColorSlider\n                    id=\"s\"\n                    label=\"S:\"\n                    max={100}\n                    color={rootState.hsv.s}\n                    handleChange={handleChangeForSliderS}\n                />\n                <ColorSlider\n                    id=\"v\"\n                    label=\"V:\"\n                    max={100}\n                    color={rootState.hsv.v}\n                    handleChange={handleChangeForSliderV}\n                />\n            </div>\n            <div className=\"home__approximate-color\">\n                <div className=\"home__approximate-color-row\">\n                    <PaletteLabel label=\"\" height={40} />\n                    <BaseColor rgb={rootState.rgb} height={40} />\n                </div>\n                <div className=\"home__approximate-color-row\">\n                    <PaletteLabel label=\"色相\" height={96} />\n                    {rootState.approximateHColors.map((value, index) => {\n                        return (\n                            <ApproximateColorItem\n                                color={value.hex}\n                                count={value.count}\n                                key={index.toString()}\n                            />\n                        );\n                    })}\n                </div>\n                <div className=\"home__approximate-color-row\">\n                    <PaletteLabel label=\"\" height={40} />\n                    <BaseColor rgb={rootState.rgb} height={40} />\n                </div>\n                <div className=\"home__approximate-color-row\">\n                    <PaletteLabel label=\"彩度\" height={96} />\n                    {rootState.approximateSColors.map((value, index) => {\n                        return (\n                            <ApproximateColorItem\n                                color={value.hex}\n                                count={value.count}\n                                key={index.toString()}\n                            />\n                        );\n                    })}\n                </div>\n                <div className=\"home__approximate-color-row\">\n                    <PaletteLabel label=\"\" height={40} />\n                    <BaseColor rgb={rootState.rgb} height={40} />\n                </div>\n                <div className=\"home__approximate-color-row\">\n                    <PaletteLabel label=\"明度\" height={96} />\n                    {rootState.approximateVColors.map((value, index) => {\n                        return (\n                            <ApproximateColorItem\n                                color={value.hex}\n                                count={value.count}\n                                key={index.toString()}\n                            />\n                        );\n                    })}\n                </div>\n                <div className=\"home__approximate-color-row\">\n                    <PaletteLabel label=\"\" height={40} />\n                    <BaseColor rgb={rootState.rgb} height={40} />\n                </div>\n            </div>\n\n            <p className=\"home__complementary_color-label\">\n                {Strings.HOME_COMPLEMENTARY_COLOR_LABEL}\n            </p>\n            <HEXTextField\n                hex={rootState.complementaryColor}\n                isReadOnly={false}\n            />\n            <ComplementaryColorArea\n                rgb={rootState.rgb}\n                complementaryColor={rootState.complementaryColor}\n            />\n        </div>\n    );\n};\n\nexport default Home;\n","import React from 'react';\nimport './App.scss';\nimport { Header, Home } from './containers/index';\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <Header />\n            <main className=\"main\">\n                <Home />\n            </main>\n        </div>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import('web-vitals').then(\n            ({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n                getCLS(onPerfEntry);\n                getFID(onPerfEntry);\n                getFCP(onPerfEntry);\n                getLCP(onPerfEntry);\n                getTTFB(onPerfEntry);\n            }\n        );\n    }\n};\n\nexport default reportWebVitals;\n","import { Colors, UpdateColorActionTypes } from './types';\nimport ActionTypes from './actionTypes';\nimport {\n    createApproximateColorH,\n    createApproximateColorS,\n    createApproximateColorV,\n    toComplementaryColorFromHEX,\n    toHEXFromRGB,\n    toRGBFromHSV,\n} from './operations';\n\nconst initialState: Colors = {\n    rgb: { r: 0, g: 0, b: 0 },\n    hsv: { h: 0, s: 0, v: 0 },\n    hex: '000000',\n    complementaryColor: '000000',\n    approximateHColors: createApproximateColorH('000000', 0, 0, 0),\n    approximateSColors: createApproximateColorS('000000', 0, 0, 0),\n    approximateVColors: createApproximateColorV('000000', 0, 0, 0),\n};\n\nconst colorsReducer = (\n    state = initialState,\n    action: UpdateColorActionTypes\n): Colors => {\n    switch (action.type) {\n        case ActionTypes.updateR:\n            return {\n                ...state,\n                rgb: { r: action.payload, g: state.rgb.g, b: state.rgb.b },\n            };\n        case ActionTypes.updateG:\n            return {\n                ...state,\n                rgb: { r: state.rgb.r, g: action.payload, b: state.rgb.b },\n            };\n        case ActionTypes.updateB:\n            return {\n                ...state,\n                rgb: { r: state.rgb.r, g: state.rgb.g, b: action.payload },\n            };\n        case ActionTypes.updateH:\n            return {\n                ...state,\n                hsv: { h: action.payload, s: state.hsv.s, v: state.hsv.v },\n            };\n        case ActionTypes.updateS:\n            return {\n                ...state,\n                hsv: { h: state.hsv.h, s: action.payload, v: state.hsv.v },\n            };\n        case ActionTypes.updateV:\n            return {\n                ...state,\n                hsv: { h: state.hsv.h, s: state.hsv.s, v: action.payload },\n            };\n        case ActionTypes.updateHex: {\n            let newHEX: string;\n            if (action.payload === undefined) {\n                newHEX = toHEXFromRGB(state.rgb.r, state.rgb.g, state.rgb.b);\n            } else {\n                newHEX = action.payload!;\n            }\n            return { ...state, hex: newHEX };\n        }\n        case ActionTypes.updateHexForHsv: {\n            const rgb = toRGBFromHSV([state.hsv.h, state.hsv.s, state.hsv.v]);\n            const newHEX = toHEXFromRGB(rgb[0], rgb[1], rgb[2]);\n            return {\n                ...state,\n                hex: newHEX,\n            };\n        }\n        case ActionTypes.updateComplementaryColor: {\n            const newComplementaryColor = toComplementaryColorFromHEX(\n                state.hex\n            );\n            return { ...state, complementaryColor: newComplementaryColor };\n        }\n        case ActionTypes.updateApproximateColor: {\n            const hex = action.payload;\n            const approximateHColors = createApproximateColorH(\n                hex,\n                state.hsv.h,\n                state.hsv.s,\n                state.hsv.v\n            );\n            const approximateSColors = createApproximateColorS(\n                hex,\n                state.hsv.h,\n                state.hsv.s,\n                state.hsv.v\n            );\n            const approximateVColors = createApproximateColorV(\n                hex,\n                state.hsv.h,\n                state.hsv.s,\n                state.hsv.v\n            );\n            return {\n                ...state,\n                approximateHColors,\n                approximateSColors,\n                approximateVColors,\n            };\n        }\n        default:\n            return state;\n    }\n};\n\nexport default colorsReducer;\n","import { combineReducers, createStore } from 'redux';\nimport colorsReducer from '../colors/reducers';\n\nconst rootReducer = combineReducers({\n    colors: colorsReducer,\n});\n\nexport type RootState = ReturnType<typeof rootReducer>;\nconst store = createStore(rootReducer);\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport { Provider } from 'react-redux';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport store from './reducks/store/store';\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App />\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}