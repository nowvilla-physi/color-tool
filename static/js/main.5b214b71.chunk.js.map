{"version":3,"sources":["strings.ts","assets/images/logo.svg","containers/Header.tsx","components/BaseColor.tsx","components/ComplementaryColorArea.tsx","components/HEXTextField.tsx","components/PaletteLabel.tsx","components/RGBTextField.tsx","components/ColorSlider.tsx","reducks/colors/actionTypes.ts","reducks/colors/actions.ts","reducks/colors/operations.ts","containers/Home.tsx","App.tsx","reportWebVitals.ts","reducks/colors/reducers.ts","reducks/store/store.ts","index.tsx"],"names":["HEADER_TITLE","HOME_COMPLEMENTARY_COLOR_DESCRIPTION","Header","className","src","logo","alt","Strings","BaseColor","props","color","height","style","backgroundColor","ComplementaryColorArea","hex","complementaryColor","styles","area","background","font","HEXTextField","isReadOnly","handleChange","htmlFor","id","type","value","readOnly","onChange","e","console","log","PaletteLabel","label","RGBTextField","ColorSlider","max","min","ActionTypes","updateR","updateG","updateB","updateH","updateS","updateV","updateHex","updateHexForHsv","updateComplementaryColor","r","payload","g","b","h","s","v","updateHexForHSV","hexRegex","toHEXFromRGB","componentToHex","decimalColor","hexColor","toString","length","toRGBFromHEX","result","exec","rgb","i","parseInt","toComplementaryColorFromHEX","hexRGB","sum","Math","newRGB","map","toRGBFromHSV","hsv","hDegree","floor","diff","v1","v2","v3","Home","rootState","useSelector","state","colors","dispatch","useDispatch","useEffect","toHSVFromRGB","event","inputtedHEX","target","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","initialState","approximateColors","colorsReducer","action","newHEX","undefined","newComplementaryColor","rootReducer","combineReducers","store","createStore","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5b214b71.chunk.js","sourcesContent":["export const HEADER_TITLE = 'Web Design Palette';\nexport const HOME_DESCRIPTION_PURPOSE =\n    'RGBやHSVから『近似色』と『補色』を生成します。';\nexport const HOME_DESCRIPTION_HOW_TO_USE =\n    'カラーコードの入力 or スライダーによって生成できます。';\nexport const HOME_TO_HEX_LABEL =\n    'RGB(10進数)、もしくはHEX(16進数)を入力して下さい。';\nexport const HOME_TO_HEX_INPUT_LABEL_RED = 'R';\nexport const HOME_TO_HEX_INPUT_LABEL_GREEN = 'G';\nexport const HOME_TO_HEX_INPUT_LABEL_BLUE = 'B';\nexport const HOME_HEX_LABEL = '#';\nexport const HOME_APPROXIMATE_COLOR_LABEL = '近似色変換';\nexport const HOME_COMPLEMENTARY_COLOR_LABEL = '補色変換';\nexport const HOME_COMPLEMENTARY_COLOR_DESCRIPTION = '背景色が補色です！！！';\n","export default __webpack_public_path__ + \"static/media/logo.25a25603.svg\";","import React from 'react';\nimport '../assets/sass/header.scss';\nimport * as Strings from '../strings';\nimport logo from '../assets/images/logo.svg';\n\nconst Header: React.VFC = () => {\n    return (\n        <div className=\"header\">\n            <h1 className=\"header__logo\">\n                <img\n                    className=\"header__img\"\n                    src={logo}\n                    alt={Strings.HEADER_TITLE}\n                />\n            </h1>\n            <p className=\"header__title\">{Strings.HEADER_TITLE}</p>\n        </div>\n    );\n};\n\nexport default Header;\n","import React from 'react';\nimport '../assets/sass/BaseColor.scss';\n\ntype Props = {\n    color: string;\n    height: number;\n};\n\nconst BaseColor: React.VFC<Props> = (props) => {\n    const { color, height } = props;\n    const style = {\n        height: `${height}px`,\n        backgroundColor: `#${color}`,\n    };\n    return <div className=\"base-color\" style={style} />;\n};\n\nexport default BaseColor;\n","import React from 'react';\nimport '../assets/sass/complementaryColorArea.scss';\nimport * as Strings from '../strings';\n\ntype Props = {\n    hex: string;\n    complementaryColor: string;\n};\n\nconst ComplementaryColorArea: React.VFC<Props> = (props) => {\n    const { hex, complementaryColor } = props;\n\n    const styles: { [key: string]: React.CSSProperties } = {\n        area: {\n            background: `#${complementaryColor}`,\n        },\n        font: {\n            color: `#${hex}`,\n        },\n    };\n\n    return (\n        <div className=\"complementary-color-area\" style={styles.area}>\n            <p\n                className=\"complementary-color-area__description\"\n                style={styles.font}\n            >\n                {Strings.HOME_COMPLEMENTARY_COLOR_DESCRIPTION}\n            </p>\n            <p\n                className=\"complementary-color-area__description\"\n                style={styles.font}\n            >\n                {Strings.HOME_COMPLEMENTARY_COLOR_DESCRIPTION}\n            </p>\n            <p\n                className=\"complementary-color-area__description\"\n                style={styles.font}\n            >\n                {Strings.HOME_COMPLEMENTARY_COLOR_DESCRIPTION}\n            </p>\n        </div>\n    );\n};\n\nexport default ComplementaryColorArea;\n","import React from 'react';\nimport '../assets/sass/hexTextField.scss';\nimport * as Strings from '../strings';\n\ntype Props = {\n    hex: string;\n    isReadOnly: boolean;\n    handleChange?: (value: React.ChangeEvent<HTMLInputElement>) => void;\n};\n\nconst HEXTextField: React.VFC<Props> = (props) => {\n    const { hex, isReadOnly, handleChange } = props;\n\n    return (\n        <div className=\"hex-text-field\">\n            <label className=\"hex-text-field__label\" htmlFor=\"hex\">\n                {Strings.HOME_HEX_LABEL}\n            </label>\n            <input\n                className=\"hex-text-field__input\"\n                id=\"hex\"\n                type=\"text\"\n                value={hex}\n                readOnly={isReadOnly}\n                onChange={(e) =>\n                    handleChange ? handleChange(e) : console.log(e)\n                }\n            />\n        </div>\n    );\n};\n\nexport default HEXTextField;\n","import React from 'react';\nimport '../assets/sass/paletteLabel.scss';\n\ntype Props = {\n    label: string;\n    height: number;\n};\n\nconst PaletteLabel: React.VFC<Props> = (props) => {\n    const { label, height } = props;\n    const styles: { [key: string]: React.CSSProperties } = {\n        height: {\n            height: `${height}px`,\n        },\n    };\n\n    return (\n        <div className=\"palette-label\" style={styles.height}>\n            <p>{label}</p>\n        </div>\n    );\n};\n\nexport default PaletteLabel;\n","import React from 'react';\nimport '../assets/sass/rgbTextField.scss';\n\ntype Props = {\n    id: string;\n    label: string;\n    color: number;\n};\n\nconst RGBTextField: React.VFC<Props> = (props) => {\n    const { id, label, color } = props;\n    const isReadOnly = true;\n    return (\n        <div className=\"rgb-text-field\">\n            <label\n                className=\"rgb-text-field__label\"\n                htmlFor={id}\n            >{`${label} : `}</label>\n            <input\n                className={`rgb-text-field__input--${id}`}\n                id={id}\n                type=\"text\"\n                value={color}\n                readOnly={isReadOnly}\n            />\n        </div>\n    );\n};\n\nexport default RGBTextField;\n","import React from 'react';\nimport Slider from 'rc-slider';\nimport 'rc-slider/assets/index.css';\nimport '../assets/sass/colorSlider.scss';\n\ntype Props = {\n    id: string;\n    label: string;\n    max: number;\n    color: number;\n    handleChange: (value: number) => void;\n};\n\nconst ColorSlider: React.VFC<Props> = (props) => {\n    const { id, label, max, color, handleChange } = props;\n    return (\n        <div className={`slider--${id}`}>\n            <span>{label}</span>\n            <Slider\n                min={0}\n                max={max}\n                value={color}\n                onChange={(value) => handleChange(value)}\n            />\n        </div>\n    );\n};\n\nexport default ColorSlider;\n","const ActionTypes = {\n    updateR: 'UPDATE_R',\n    updateG: 'UPDATE_G',\n    updateB: 'UPDATE_B',\n    updateH: 'UPDATE_H',\n    updateS: 'UPDATE_S',\n    updateV: 'UPDATE_V',\n    updateHex: 'UPDATE_HEX',\n    updateHexForHsv: 'UPDATE_HEX_FOR_HSV',\n    updateComplementaryColor: 'UPDATE_COMPLEMENTARY_COLOR',\n} as const;\n\nexport default ActionTypes;\n","import ActionTypes from './actionTypes';\nimport { UpdateColorActionTypes } from './types';\n\nexport const updateR = (r: number): UpdateColorActionTypes => {\n    return {\n        type: ActionTypes.updateR,\n        payload: r,\n    };\n};\n\nexport const updateG = (g: number): UpdateColorActionTypes => {\n    return {\n        type: ActionTypes.updateG,\n        payload: g,\n    };\n};\n\nexport const updateB = (b: number): UpdateColorActionTypes => {\n    return {\n        type: ActionTypes.updateB,\n        payload: b,\n    };\n};\n\nexport const updateH = (h: number): UpdateColorActionTypes => {\n    return {\n        type: ActionTypes.updateH,\n        payload: h,\n    };\n};\n\nexport const updateS = (s: number): UpdateColorActionTypes => {\n    return {\n        type: ActionTypes.updateS,\n        payload: s,\n    };\n};\n\nexport const updateV = (v: number): UpdateColorActionTypes => {\n    return {\n        type: ActionTypes.updateV,\n        payload: v,\n    };\n};\n\nexport const updateHex = (hex?: string): UpdateColorActionTypes => {\n    return {\n        type: ActionTypes.updateHex,\n        payload: hex,\n    };\n};\n\nexport const updateHexForHSV = (): UpdateColorActionTypes => {\n    return {\n        type: ActionTypes.updateHexForHsv,\n    };\n};\n\nexport const updateComplementaryColor = (): UpdateColorActionTypes => {\n    return {\n        type: ActionTypes.updateComplementaryColor,\n    };\n};\n","const hexRegex: RegExp = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i;\n\n// rgbからhexに変換する。\nexport const toHEXFromRGB = (r: number, g: number, b: number) => {\n    return componentToHex(r) + componentToHex(g) + componentToHex(b);\n};\n\nconst componentToHex = (decimalColor: number) => {\n    const hexColor = decimalColor.toString(16);\n    return hexColor.length === 1 ? `0${hexColor}` : hexColor.toString();\n};\n\n// hexからrgbに変換する。\nexport const toRGBFromHEX = (hex: string) => {\n    const result = hexRegex.exec(`#${hex}`);\n    const rgb: Array<number> = [];\n    if (result !== null) {\n        for (let i = 0; i < 3; i += 1) {\n            // exec()は要素1以降にマッチした結果を返すためindex + 1とする。\n            rgb[i] = parseInt(result[i + 1], 16);\n        }\n    }\n    return rgb;\n};\n\n// hexから補色に変換する。\nexport const toComplementaryColorFromHEX = (hexRGB: string) => {\n    const rgb: Array<number> = toRGBFromHEX(hexRGB);\n    const r: number = rgb[0];\n    const g: number = rgb[1];\n    const b: number = rgb[2];\n    if (r >= 0 && r <= 255 && g >= 0 && g <= 255 && b >= 0 && b <= 255) {\n        const max = Math.max(r, g, b);\n        const min = Math.min(r, g, b);\n        const sum = max + min;\n\n        const newRGB = rgb.map((color) => {\n            return sum - color;\n        });\n        return toHEXFromRGB(newRGB[0], newRGB[1], newRGB[2]);\n    }\n    return toHEXFromRGB(rgb[0], rgb[1], rgb[2]);\n};\n\n// hexからhsvに変換する。\nexport const toHSVFromRGB = (rgb: Array<number>) => {\n    const r: number = rgb[0] / 255;\n    const g: number = rgb[1] / 255;\n    const b: number = rgb[2] / 255;\n\n    const max = Math.max(r, g, b);\n    const min = Math.min(r, g, b);\n    const diff = max - min;\n\n    // 色相\n    let h: number;\n    switch (min) {\n        case max:\n            h = 0;\n            break;\n        case b:\n            h = 60 * ((g - r) / diff) + 60;\n            break;\n        case r:\n            h = 60 * ((b - g) / diff) + 180;\n            break;\n        case g:\n            h = 60 * ((r - b) / diff) + 300;\n            break;\n        default:\n            h = 0;\n            console.log('unexpected error.');\n            break;\n    }\n\n    // 彩度\n    const s = max !== 0 ? ((max - min) / max) * 100 : 0;\n\n    // 明度\n    const v = max * 100;\n\n    return [Math.floor(h), Math.floor(s), Math.floor(v)];\n};\n\n// hsvからrgbに変換する。\nexport const toRGBFromHSV = (hsv: Array<number>) => {\n    let rgb;\n    const h = hsv[0] / 60;\n    const s = hsv[1] / 100;\n    const v = hsv[2] / 100;\n\n    if (s === 0) {\n        rgb = [v, v, v];\n    } else {\n        const hDegree = Math.floor(h);\n        const diff = h - hDegree;\n        const v1 = v * (1 - s);\n        const v2 = v * (1 - s * diff);\n        const v3 = v * (1 - s * (1 - diff));\n\n        switch (hDegree) {\n            case 0:\n            case 6:\n                rgb = [v, v3, v1];\n                break;\n            case 1:\n                rgb = [v2, v, v1];\n                break;\n            case 2:\n                rgb = [v1, v, v3];\n                break;\n            case 3:\n                rgb = [v1, v2, v];\n                break;\n            case 4:\n                rgb = [v3, v1, v];\n                break;\n            case 5:\n                rgb = [v, v1, v2];\n                break;\n            default:\n                rgb = [v, v, v];\n        }\n    }\n\n    return rgb.map((color) => {\n        return Math.floor(color * 255);\n    });\n};\n","import React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport * as Strings from '../strings';\nimport '../assets/sass/home.scss';\nimport {\n    BaseColor,\n    ColorSlider,\n    PaletteLabel,\n    RGBTextField,\n} from '../components';\nimport HEXTextField from '../components/HEXTextField';\nimport ComplementaryColorArea from '../components/ComplementaryColorArea';\nimport { RootState } from '../reducks/store/store';\nimport {\n    updateB,\n    updateComplementaryColor,\n    updateG,\n    updateH,\n    updateHex,\n    updateHexForHSV,\n    updateR,\n    updateS,\n    updateV,\n} from '../reducks/colors/actions';\nimport { toHSVFromRGB, toRGBFromHEX } from '../reducks/colors/operations';\n\nconst Home: React.VFC = () => {\n    const rootState = useSelector((state: RootState) => state.colors);\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n        const rgb = toRGBFromHEX(rootState.hex);\n        if (rgb.length === 3) {\n            dispatch(updateR(rgb[0]));\n            dispatch(updateG(rgb[1]));\n            dispatch(updateB(rgb[2]));\n            dispatch(updateComplementaryColor());\n\n            const hsv = toHSVFromRGB(rgb);\n            dispatch(updateH(hsv[0]));\n            dispatch(updateS(hsv[1]));\n            dispatch(updateV(hsv[2]));\n        }\n    }, [rootState.hex]);\n\n    const handleChangeForHEX = (event: React.ChangeEvent<HTMLInputElement>) => {\n        const inputtedHEX = event.target.value;\n        if (inputtedHEX.length <= 6) {\n            dispatch(updateHex(inputtedHEX));\n        }\n    };\n\n    const handleChangeForSliderR = (value: number) => {\n        dispatch(updateR(value));\n        dispatch(updateHex());\n    };\n\n    const handleChangeForSliderG = (value: number) => {\n        dispatch(updateG(value));\n        dispatch(updateHex());\n    };\n\n    const handleChangeForSliderB = (value: number) => {\n        dispatch(updateB(value));\n        dispatch(updateHex());\n    };\n\n    const handleChangeForSliderH = (value: number) => {\n        dispatch(updateH(value));\n        dispatch(updateHexForHSV());\n    };\n\n    const handleChangeForSliderS = (value: number) => {\n        dispatch(updateS(value));\n        dispatch(updateHexForHSV());\n    };\n\n    const handleChangeForSliderV = (value: number) => {\n        dispatch(updateV(value));\n        dispatch(updateHexForHSV());\n    };\n\n    return (\n        <div className=\"home\">\n            <p className=\"home__description\">\n                {Strings.HOME_DESCRIPTION_PURPOSE}\n            </p>\n            <p className=\"home__description\">\n                {Strings.HOME_DESCRIPTION_HOW_TO_USE}\n            </p>\n            <p className=\"home__description\">{Strings.HOME_TO_HEX_LABEL}</p>\n            <div className=\"home__to-hex\">\n                <HEXTextField\n                    hex={rootState.hex}\n                    isReadOnly={false}\n                    handleChange={handleChangeForHEX}\n                />\n                <p className=\"home__arrow\"> → </p>\n                <RGBTextField\n                    id=\"red\"\n                    label={Strings.HOME_TO_HEX_INPUT_LABEL_RED}\n                    color={rootState.rgb.r}\n                />\n                <RGBTextField\n                    id=\"green\"\n                    label={Strings.HOME_TO_HEX_INPUT_LABEL_GREEN}\n                    color={rootState.rgb.g}\n                />\n                <RGBTextField\n                    id=\"blue\"\n                    label={Strings.HOME_TO_HEX_INPUT_LABEL_BLUE}\n                    color={rootState.rgb.b}\n                />\n            </div>\n            <p className=\"home__approximate_color-label\">\n                {Strings.HOME_APPROXIMATE_COLOR_LABEL}\n            </p>\n            <div className=\"home__slider\">\n                <ColorSlider\n                    id=\"r\"\n                    label=\"R:\"\n                    max={255}\n                    color={rootState.rgb.r}\n                    handleChange={handleChangeForSliderR}\n                />\n                <ColorSlider\n                    id=\"g\"\n                    label=\"G:\"\n                    max={255}\n                    color={rootState.rgb.g}\n                    handleChange={handleChangeForSliderG}\n                />\n                <ColorSlider\n                    id=\"b\"\n                    label=\"B:\"\n                    max={255}\n                    color={rootState.rgb.b}\n                    handleChange={handleChangeForSliderB}\n                />\n                <ColorSlider\n                    id=\"h\"\n                    label=\"H:\"\n                    max={359}\n                    color={rootState.hsv.h}\n                    handleChange={handleChangeForSliderH}\n                />\n                <ColorSlider\n                    id=\"s\"\n                    label=\"S:\"\n                    max={100}\n                    color={rootState.hsv.s}\n                    handleChange={handleChangeForSliderS}\n                />\n                <ColorSlider\n                    id=\"v\"\n                    label=\"V:\"\n                    max={100}\n                    color={rootState.hsv.v}\n                    handleChange={handleChangeForSliderV}\n                />\n            </div>\n            <div className=\"home__approximate-color\">\n                <div className=\"home__approximate-color-row\">\n                    <PaletteLabel label=\"\" height={40} />\n                    <BaseColor color={rootState.hex} height={40} />\n                </div>\n                <div>\n                    <PaletteLabel label=\"色相\" height={96} />\n                </div>\n                <div className=\"home__approximate-color-row\">\n                    <PaletteLabel label=\"\" height={40} />\n                    <BaseColor color={rootState.hex} height={40} />\n                </div>\n                <div>\n                    <PaletteLabel label=\"彩度\" height={96} />\n                </div>\n                <div className=\"home__approximate-color-row\">\n                    <PaletteLabel label=\"\" height={40} />\n                    <BaseColor color={rootState.hex} height={40} />\n                </div>\n                <div>\n                    <PaletteLabel label=\"明度\" height={96} />\n                </div>\n                <div className=\"home__approximate-color-row\">\n                    <PaletteLabel label=\"\" height={40} />\n                    <BaseColor color={rootState.hex} height={40} />\n                </div>\n            </div>\n\n            <p className=\"home__complementary_color-label\">\n                {Strings.HOME_COMPLEMENTARY_COLOR_LABEL}\n            </p>\n            <HEXTextField\n                hex={rootState.complementaryColor}\n                isReadOnly={false}\n            />\n            <ComplementaryColorArea\n                hex={rootState.hex}\n                complementaryColor={rootState.complementaryColor}\n            />\n        </div>\n    );\n};\n\nexport default Home;\n","import React from 'react';\nimport './App.scss';\nimport { Header, Home } from './containers/index';\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <Header />\n            <main className=\"main\">\n                <Home />\n            </main>\n        </div>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import('web-vitals').then(\n            ({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n                getCLS(onPerfEntry);\n                getFID(onPerfEntry);\n                getFCP(onPerfEntry);\n                getLCP(onPerfEntry);\n                getTTFB(onPerfEntry);\n            }\n        );\n    }\n};\n\nexport default reportWebVitals;\n","import { Colors, UpdateColorActionTypes } from './types';\nimport ActionTypes from './actionTypes';\nimport {\n    toComplementaryColorFromHEX,\n    toHEXFromRGB,\n    toRGBFromHSV,\n} from './operations';\n\nconst initialState: Colors = {\n    rgb: { r: 0, g: 0, b: 0 },\n    hsv: { h: 0, s: 0, v: 0 },\n    hex: '000000',\n    complementaryColor: '000000',\n    approximateColors: [],\n};\n\nconst colorsReducer = (\n    state = initialState,\n    action: UpdateColorActionTypes\n): Colors => {\n    switch (action.type) {\n        case ActionTypes.updateR:\n            return {\n                ...state,\n                rgb: { r: action.payload, g: state.rgb.g, b: state.rgb.b },\n            };\n        case ActionTypes.updateG:\n            return {\n                ...state,\n                rgb: { r: state.rgb.r, g: action.payload, b: state.rgb.b },\n            };\n        case ActionTypes.updateB:\n            return {\n                ...state,\n                rgb: { r: state.rgb.r, g: state.rgb.g, b: action.payload },\n            };\n        case ActionTypes.updateH:\n            return {\n                ...state,\n                hsv: { h: action.payload, s: state.hsv.s, v: state.hsv.v },\n            };\n        case ActionTypes.updateS:\n            return {\n                ...state,\n                hsv: { h: state.hsv.h, s: action.payload, v: state.hsv.v },\n            };\n        case ActionTypes.updateV:\n            return {\n                ...state,\n                hsv: { h: state.hsv.h, s: state.hsv.s, v: action.payload },\n            };\n        case ActionTypes.updateHex: {\n            let newHEX: string;\n            if (action.payload === undefined) {\n                newHEX = toHEXFromRGB(state.rgb.r, state.rgb.g, state.rgb.b);\n            } else {\n                newHEX = action.payload!;\n            }\n            return { ...state, hex: newHEX };\n        }\n        case ActionTypes.updateHexForHsv: {\n            const rgb = toRGBFromHSV([state.hsv.h, state.hsv.s, state.hsv.v]);\n            const newHEX = toHEXFromRGB(rgb[0], rgb[1], rgb[2]);\n            return {\n                ...state,\n                hex: newHEX,\n            };\n        }\n        case ActionTypes.updateComplementaryColor: {\n            const newComplementaryColor = toComplementaryColorFromHEX(\n                state.hex\n            );\n            return { ...state, complementaryColor: newComplementaryColor };\n        }\n        default:\n            return state;\n    }\n};\n\nexport default colorsReducer;\n","import { combineReducers, createStore } from 'redux';\nimport colorsReducer from '../colors/reducers';\n\nconst rootReducer = combineReducers({\n    colors: colorsReducer,\n});\n\nexport type RootState = ReturnType<typeof rootReducer>;\nconst store = createStore(rootReducer);\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport { Provider } from 'react-redux';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport store from './reducks/store/store';\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App />\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}